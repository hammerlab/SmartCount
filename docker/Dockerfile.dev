ARG TF_IMAGE=tensorflow/tensorflow:1.7.0-gpu-py3
FROM $TF_IMAGE
ARG LAB_DIR=/lab
ARG REPO_DIR=/lab/repos
ARG DATA_DIR=/lab/data
ARG CELLDOM_REPO_DIR=$REPO_DIR/celldom
ARG CELLDOM_DATA_DIR=$DATA_DIR/celldom
ARG CVUTILS_REPO_DIR=$REPO_DIR/cvutils

RUN mkdir -p $LAB_DIR $REPO_DIR $DATA_DIR

RUN apt-get update && apt-get install -y --no-install-recommends git vim
RUN pip install --upgrade pip

# Necessary dependencies for OpenCV
RUN apt-get install -y libsm6 libxext6 libfontconfig1 libxrender1

RUN pip install \
    keras==2.1.6 \
    scikit-image==0.14.0 \
    imageio==2.4.1 \
    dash==0.36.0 \
    dash-html-components==0.13.5 \
    dash-core-components==0.43.0 \
    dash-table==3.1.11 \
    jupyterlab plotly plotnine \
    Cython papermill opencv-python \
    tables retrying fire tifffile \
    umap-learn moviepy Pillow h5py imgaug

# The below is necessary to download ffmeg locally and though imageio has since deprecated the
# need for this, moviepy still has hardcode references to deprecated functions (so an older
# version of imageio is used along with a call to run the one-time download)
RUN python -c 'import imageio; imageio.plugins.ffmpeg.download()'

RUN pip install --no-deps \
    "git+https://github.com/philferriere/cocoapi.git#egg=pycocotools&subdirectory=PythonAPI" \
    "git+https://github.com/matterport/Mask_RCNN.git#egg=maskrcnn"

# Matterport Mask RCNN project installation
# RUN cd $REPO_DIR && git clone https://github.com/matterport/Mask_RCNN.git
# See: https://github.com/matterport/Mask_RCNN/issues/6
# RUN pip install --no-deps "git+https://github.com/philferriere/cocoapi.git#egg=pycocotools&subdirectory=PythonAPI"
# Override requirements specified by RCNN lib to ignore tensorflow (which it references
# as the CPU-only package, which makes no sense for anything other than maybe unit tests)
# RUN cd $REPO_DIR/Mask_RCNN && pip install --no-deps .


# Add any source directories for development to python search path
RUN mkdir -p $(python -m site --user-site) && \
    echo "$CELLDOM_REPO_DIR/python/source" > $(python -m site --user-site)/local.pth && \
    echo "$CELLDOM_REPO_DIR/python/application" >> $(python -m site --user-site)/local.pth && \
    echo "$CVUTILS_REPO_DIR/python" >> $(python -m site --user-site)/local.pth

##################
# Dev-Specific
# TODO: figure out how to get nodejs install without python2 overriding default python
# RUN apt-get update && apt-get install -y nodejs npm
# RUN pip install wandb
###################

# Set useful development environment variables (override on run if necessary)
ENV CELLDOM_REPO_DIR $CELLDOM_REPO_DIR
ENV CELLDOM_DATA_DIR $CELLDOM_DATA_DIR
ENV CVUTILS_REPO_DIR $CVUTILS_REPO_DIR
ENV LAB_ROOT_DIR $LAB_DIR
ENV SHELL /bin/bash

# Eliminate globally these warnings: FutureWarning: Conversion of the second argument of issubdtype from
# `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`
# See here for discussion: https://github.com/h5py/h5py/issues/961
ENV PYTHONWARNINGS "ignore::FutureWarning:h5py"

WORKDIR "$LAB_DIR"

# Create link to celldom CLI executable on launch since it comes from local repo
CMD chmod a+x $CELLDOM_REPO_DIR/python/source/celldom/cli/celldom_cli.py && \
    ln -s $CELLDOM_REPO_DIR/python/source/celldom/cli/celldom_cli.py /usr/local/bin/celldom && \
    jupyter lab --allow-root